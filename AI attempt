import json import ast import os from collections import Counter import random class AI: def __init__(self): self.goal = "" # contains current goal in mind self.previous_goals = [] # contains list of all previously seen goals self.goal_results = dict() # dict containing results connected to each goal self.working_memory = dict() # dict containing key-value mappings def get_response(self, input_text): # parse user input parsed_input = self.parse_input(input_text) # update working memory with data from input for key, value in parsed_input.items(): self.working_memory[key] = value # handle special commands if 'command' in parsed_input: response = self.handle_command(parsed_input) return response # if no current goal is set, try to set one if self.goal == "": self.goal = self.set_goal(parsed_input) # generate a response based on the current goal response = self.respond_to_goal(self.goal) # update the goal result for this goal in case the user's response changed anything self.goal_results[self.goal] = self.working_memory return response # return response def parse_input(self, input_text): " parses input text and returns a dictionary of key-value mappings" parsed_input = {} # init empty dictionary # split text by comma split_text = input_text.split(',') for item in split_text: # strip surrounding whitespace item = item.strip() # split item into key and value key, value = item.split(':') # save key-value mapping to dict parsed_input[key] = value return parsed_input # return parsed input def handle_command(self, parsed_input): " handles special commands" command_type = parsed_input['command'] if command_type == 'clear': # reset conversation self.goal = "" self.previous_goals = [] self.goal_results = dict() self.working_memory = dict() return 'Conversation cleared!' # return confirmation elif command_type == 'list goals': # list current goals goals_string = ', '.join(self.previous_goals) return 'Current goals are: ' + goals_string # return goals string elif command_type == 'list results': # list results of goals results_string = json.dumps(self.goal_results) # convert to json string return 'Results of previous goals are: ' + results_string # return results def set_goal(self, parsed_input): " sets a new goal based on the user's input " goal = random.choice(list(parsed_input.keys())) # set random goal self.previous_goals.append(goal) # add goal to list of previous goals return goal # return goal def respond_to_goal(self, goal): " responds to the current goal " if goal in self.working_memory: data = self.working_memory[goal] response = f"I see that you mentioned {goal}: {data}. Anything else?" else: response = f"What can you tell me about {goal}?" return response # return response
